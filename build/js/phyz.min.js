(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function TiledIndex(){
    var limitX, limitY;

    this.indexes    = [];
    this.limitX     = 0;
    this.limitY     = 0;
    this.limit      = 0;
    this.width      = 200;
    this.height     = 200;

    this.limitX     = ~~(window.Phyz.Stage.width / this.width);
    this.width      = Math.ceil(window.Phyz.Stage.width / this.limitX);

    this.limitY     = ~~(window.Phyz.Stage.height / this.height);
    this.height     = Math.ceil(window.Phyz.Stage.height / this.limitY);

    this.limit      = this.limitX * this.limitY;

    if(window.Phyz.settings.DEBUG_DRAW){
        var n;
        for(var i = 0; i < this.limit; i++){
            n = i + 1;
            n = (n < 100 ? n < 10 ? '00' + n : '0' + n : n);
        }
    }
}

/*
* Add a Sprite in a list of index
* @param sprite
*/
TiledIndex.prototype.add = function (sprite) {
    var _index = 0;
    var numTilesX = sprite.width / this.width;
    var numTilesY = sprite.height / this.height;
    var _position = sprite.global;
    var tileX = Math.ceil((_position.x - (sprite.width/2)) / this.width);
    var tileY = Math.ceil((_position.y - (sprite.height/2)) / this.height);

    var _posX = (_position.x - (sprite.width/2)) % this.width;
    var _posY = (_position.y - (sprite.height/2)) % this.height;
    numTilesX = 1 + (_posX === 0 || _posX > (this.width - sprite.width % this.width) - 1 ? Math.ceil(numTilesX) : Math.floor(numTilesX));
    numTilesY = 1 + (_posY === 0 || _posY > (this.height - sprite.height % this.height) - 1 ? Math.ceil(numTilesY) : Math.floor(numTilesY));

    this.remove(sprite);

    for(var iX = 0; iX < numTilesX; iX++){
        for(var iY = 0; iY < numTilesY; iY++){
            _index = ((tileY + iY - 1) * this.limitX) + tileX + iX;
            sprite.tiles.push(_index);

            if(typeof this.indexes[_index] === 'undefined'){
                this.indexes[_index] = [];
            }

            this.indexes[_index].push(sprite);
        }
    }
};

TiledIndex.prototype.remove = function (sprite) {
    for(var i = 0; i < sprite.tiles.length; i++){
        this.indexes[sprite.tiles[i]].remove(sprite);
    }

    sprite.tiles = [];
};

/*
* Get iniq sprites in a list of index
* @param sprite
* $return Array
*/
TiledIndex.prototype.getOthers = function (sprite) {
    var a = [], t = sprite.root.all_childrens_tiles, s;
    for (var i = 0; i < t.length; i++) {
        s = this.indexes[t[i]];
        for (var j = 0; j < s.length; j++){
            if (a.indexOf(s) == -1 && s[j].root != sprite.root) {
                a.push(s[j]);
            }
        }
    }

    return a;
};

module.exports = TiledIndex;

},{}],2:[function(require,module,exports){

/**
 * Represents a V2 in two dimensions.
 *
 * @param {?number=} x The x position.
 * @param {?number=} y The y position.
 * @constructor
 */
function V2 (x, y) {
    this.x = Number(x || 0);
    this.y = Number(y || 0);
};

/**
 * Print vaues into formated string
 *
 * @return {String} Formated values.
 */
V2.prototype.toString = function () {
    return '['+this.x+', '+this.y+']';
};

/**
 * Clone the values of V2.
 *
 * @return {V2} This for chaining.
 */
V2.prototype.clone = function () {
    return new V2(this.x, this.y);
};

/**
 * Copy the values of another V2 into this one.
 *
 * @param {V2} other The other V2.
 * @return {V2} This for chaining.
 */
V2.prototype.copy = function (other) {
    this.x = other.x;
    this.y = other.y;
    return this;
};

/**
 * Rotate this V2 by 90 degrees
 *
 * @return {V2} This for chaining.
 */
V2.prototype.perp = function () {
    var x = this.x;
    this.x = this.y;
    this.y = -x;
    return this;
};

/**
 * Reverse this V2.
 *
 * @return {V2} This for chaining.
 */
V2.prototype.reverse = function () {
    this.x = -this.x;
    this.y = -this.y;
    return this;
};

/**
 * Normalize (make unit length) this V2.
 *
 * @return {V2} This for chaining.
 */
V2.prototype.normalize = function () {
    var d = this.len();
    if (d > 0) {
        this.x = this.x / d;
        this.y = this.y / d;
    }
    return this;
};

/**
 * Add another V2 to this one.
 *
 * @param {V2} other The other V2.
 * @return {V2} This for chaining.
 */
V2.prototype.add = function (other) {
    this.x += other.x;
    this.y += other.y;
    return this;
};

/**
 * Subtract another V2 from this one.
 *
 * @param {V2} other The other V2.
 * @return {V2} This for chaiing.
 */
V2.prototype.sub = function (other) {
    this.x -= other.x;
    this.y -= other.y;
    return this;
};

/**
 * Scale this V2.
 *
 * @param {number} x The scaling factor in the x direction.
 * @param {?number=} y The scaling factor in the y direction.  If this
 *   is not specified, the x scaling factor will be used.
 * @return {V2} This for chaining.
 */
V2.prototype.scale = function (x, y) {
    this.x *= x;
    this.y *= y || x;
    return this;
};

/**
 * Project this V2 on to another V2.
 *
 * @param {V2} other The V2 to project onto.
 * @return {V2} This for chaining.
 */
V2.prototype.project = function (other) {
    var amt = this.dot(other) / other.len2();
    this.x = amt * other.x;
    this.y = amt * other.y;
    return this;
};

/**
 * Project this V2 onto a V2 of unit length.
 *
 * @param {V2} other The unit V2 to project onto.
 * @return {V2} This for chaining.
 */
V2.prototype.projectN = function (other) {
    var amt = this.dot(other);
    this.x = amt * other.x;
    this.y = amt * other.y;
    return this;
};

/**
 * Reflect this V2 on an arbitrary axis.
 *
 * @param {V2} axis The V2 representing the axis.
 * @return {V2} This for chaining.
 */
V2.prototype.reflect = function (axis) {
    var x = this.x;
    var y = this.y;
    this.project(axis).scale(2);
    this.x -= x;
    this.y -= y;
    return this;
};

/**
 * Reflect this V2 on an arbitrary axis (represented by a unit V2)
 *
 * @param {V2} axis The unit V2 representing the axis.
 * @return {V2} This for chaining.
 */
V2.prototype.reflectN = function (axis) {
    var x = this.x;
    var y = this.y;
    this.projectN(axis).scale(2);
    this.x -= x;
    this.y -= y;
    return this;
};

/**
 * Get the dot product of this V2 against another.
 *
 * @param {V2}  other The V2 to dot this one against.
 * @return {number} The dot product.
 */
V2.prototype.dot = function (other) {
    return this.x * other.x + this.y * other.y;
};

/**
 * Get the length^2 of this V2.
 *
 * @return {number} The length^2 of this V2.
 */
V2.prototype.len2 = function () {
    return this.dot(this);
};

/**
 * Get the length of this V2.
 *
 * @return {number} The length of this V2.
 */
V2.prototype.len = function () {
    return Math.sqrt(this.len2());
};

module.exports = V2;

},{}],3:[function(require,module,exports){
/*  Authors: RVAZ (Renan Vaz) && Wormwood (MÃ¡rcio Laubstein)
 *	Version: 4.0
*/

var EventHandler        = require('./util/EventHandler'),
    Device              = require('./util/Device'),
    Events              = require('./util/Events'),
    Collisions          = require('./collision/Collisions'),
    Collide             = require('./collision/Collide'),
    Container           = require('./display/Container'),
    Sprite              = require('./display/Sprite'),
    Camera              = require('./display/Camera'),
    Stage               = require('./display/Stage'),
    Paralax             = require('./display/Paralax'),
    Tween               = require('./tween/Tween'),
    Preloader           = require('./preloader/Preloader'),
    V2                  = require('./V2'),
    TiledIndex          = require('./TiledIndex');

function World (el){
    this._sprites   = [];
    this._stage     = null;
    this._paused    = false;

    this.camera     = new Camera(el);

    this.settings   = {
        DEBUG_DRAW: true,
        FPS_METER: true
    };

    this.physics = {
        acceleration: new V2(0, 800),
        resistance: new V2(200, 0)
    };

    Object.defineProperty(this, 'paused', {
        get: function(){ return this._paused; },
        set: function(v){
            this._vi_pausedew = v;
        }
    });

    this._stage = new createjs.Stage(this.camera.el);
    this._stage.addChild(this.camera.stage.layer);
}

World.prototype.removeChild = function (s) {
    this._sprites.remove(s);
    this.camera.stage.layer.removeChild(s.layer);
};

World.prototype.addChild = function (s) {
    s._world = this;

    this.camera.stage.layer.addChild(s.layer);

    this._sprites.push(s);
    if (this.settings.DEBUG_DRAW) s.debugDraw();
};

World.prototype.start = function () {
    var _this = this;

    var timestamp = function () {
        return ((window.performance && window.performance.now) ? window.performance.now() : new Date().getTime());
    };

    var frame = function () {
        now = timestamp();
        time = time + Math.min(1, (now - last) / 1000);
        dt = Math.min(1, (now - last) / 1000);
        _this._update(dt);
        _this._render();
        last = now;
        if (fpsmeter) fpsmeter.tick();
        requestAnimationFrame(frame);
    };

    var now,
        dt       = 0,
        time     = 0,
        last     = timestamp(),
        fpsmeter = this.settings.FPS_METER ? new FPSMeter({decimals: 0, graph: true, theme: 'dark', heat:  true, left: 'auto', top: '5px', right: '5px', bottom: 'auto'}) : null;

    // this.TiledIndex = new TiledIndex();

    if (fpsmeter) fpsmeter.tickStart();
    requestAnimationFrame(frame);
};

World.prototype._update = function(dt){
    var sprites = this._sprites, s, acceleration, resistance, others, o, i, j, cMax;

    Tween.tick(dt);

    // Sprites
    for (i = 0; i < sprites.length; i++) {
        s = sprites[i];

        s.setCache();

        if (s.tick) {
            s.tick(dt);
        }

        if (s.type === 'dynamic') {
            acceleration = new V2(
                (this.physics.acceleration.x + s.acceleration.x) * dt,
                (this.physics.acceleration.y + s.acceleration.y) * dt
            );

            resistance = new V2(
                (this.physics.resistance.x + s.resistance.x) * dt,
                (this.physics.resistance.y + s.resistance.y) * dt
            );

            s.velocity.add(acceleration);

            if (Math.abs(s.velocity.x) > resistance.x) {
                s.velocity.x += (s.velocity.x > 0) ? -resistance.x : resistance.x;
            } else {
                s.velocity.x = 0;
            }

            if (Math.abs(s.velocity.y) > resistance.y) {
                s.velocity.y += (s.velocity.y > 0) ? -resistance.y : resistance.y;
            } else {
                s.velocity.y = 0;
            }

            s.velocity.x = (s.velocity.x < s.config.minVelocity.x) ? s.config.minVelocity.x : s.velocity.x;
            s.velocity.y = (s.velocity.y < s.config.minVelocity.y) ? s.config.minVelocity.y : s.velocity.y;
            s.velocity.x = (s.velocity.x > s.config.maxVelocity.x) ? s.config.maxVelocity.x : s.velocity.x;
            s.velocity.y = (s.velocity.y > s.config.maxVelocity.y) ? s.config.maxVelocity.y : s.velocity.y;

            s.y += s.velocity.y * dt;
            s.x += s.velocity.x * dt;

            // others = this.TiledIndex.getOthers(s);

            for (j = 0; j < sprites.length; j++) {
                o = sprites[j];
                if (s !== o) {
                    Collide.check(s, o);
                }
            }
        }
    }

    // Camera
    if (this.camera.following) {
        cMax = new V2(this.camera.stage.width - this.camera.width, this.camera.stage.height - this.camera.height);
        this.camera.x = this.camera.following.x + (this.camera.following.width/2) - (this.camera.width/2);
        this.camera.y = this.camera.following.y + (this.camera.following.height/2) - (this.camera.height/2);

        if (this.camera.x < 0) {
            this.camera.x = 0;
        } else if (this.camera.x > cMax.x) {
            this.camera.x = cMax.x;
        }

        if (this.camera.y < 0) {
            this.camera.y = 0;
        } else if (this.camera.y > cMax.y) {
            this.camera.y = cMax.y;
        }
    }
};

World.prototype._render = function(){
    var s, i;

    for (i = 0; i < this._sprites.length; i++) {
        s = this._sprites[i];

        s.layer.x = Math.round(s.x);
        s.layer.y = Math.round(s.y);
    }

    this.camera.stage.layer.x = Math.round(this.camera.stage.x);
    this.camera.stage.layer.y = Math.round(this.camera.stage.y);

    this._stage.update();
};

EventHandler.init(World.prototype);

module.exports = World;

},{"./TiledIndex":1,"./V2":2,"./collision/Collide":4,"./collision/Collisions":6,"./display/Camera":7,"./display/Container":8,"./display/Paralax":9,"./display/Sprite":10,"./display/Stage":11,"./preloader/Preloader":13,"./tween/Tween":15,"./util/Device":16,"./util/EventHandler":17,"./util/Events":18}],4:[function(require,module,exports){
var CollisionData   = require('./CollisionData'),
    Collisions      = require('./Collisions'),
    V2              = require('../V2');

function Collide () {}

Collide.prototype.check = function(s, o){
    var collided = false, overlap = new V2(0, 0), a, b, x, y, c;

    if (s.x <= o.x) { a = s; b = o; } else { a = o; b = s; }
    x = b.x - (a.x + a.width);

    if (s.y <= o.y) { a = s; b = o; } else { a = o; b = s; }
    y = b.y - (a.y + a.height);

    if (x < 0 && y < 0) {
        collided = true;
        overlap.x = x;
        overlap.y = y;
    }

    if(collided){
        c = new CollisionData(s, o);

        if(!s.sensor && !o.sensor){
            if(!o.config.plataform || (o.config.plataform && s.cache.y < s.cache.y)) {
                if (overlap.x < overlap.y) {
                    s.y += overlap.y;
                } else {
                    s.x += overlap.x;
                }

                if(s.type === 'dynamic' && o.type === 'dynamic'){
                    this.elastic(c);
                }else{
                    this.normal(c);

                    if(overlap.x < 0)
                        s.velocity.x = 0;

                    if(overlap.y < 0)
                        s.velocity.y = 0;
                }

                s.collisions.add(c);
            }
        }else{
            s.collisions.add(c);
        }
    }else{
        c = s.collisions.get(o);
        if (c) {
            s.collisions.remove(c);
        }
    }
};

Collide.prototype.normal = function(collision){
    var s = collision.self.sprite,
        o = collision.other.sprite;

    o.velocity.x = o.x - o.cache.x;
    o.velocity.y = o.y - o.cache.y;

    s.x += o.velocity.x;
    s.y += o.velocity.y;
};

Collide.prototype.elastic = function (collision) {
    var s = collision.self.sprite,
    o = collision.other.sprite;

    s.velocity = new V2(
        ((s.velocity.x * (s.mass - o.mass)) + (2 * o.mass * o.velocity.x)) / (s.mass + o.mass),
        ((s.velocity.y * (s.mass - o.mass)) + (2 * o.mass * o.velocity.y)) / (s.mass + o.mass)
    );

    o.velocity = new V2(
        ((o.velocity.x * (o.mass - s.mass)) + (2 * s.mass * s.velocity.x)) / (o.mass + s.mass),
        ((o.velocity.y * (o.mass - s.mass)) + (2 * s.mass * s.velocity.y)) / (o.mass + s.mass)
    );
};

module.exports = new Collide;
},{"../V2":2,"./CollisionData":5,"./Collisions":6}],5:[function(require,module,exports){
var V2 = require('../V2');

function CollisionData (s, o){
    this.self = {
        sprite: s,
        point: new V2(s.x, s.y)
    };

    this.other = {
        sprite: o,
        point: new V2(o.x, o.y)
    };
}

module.exports = CollisionData;

},{"../V2":2}],6:[function(require,module,exports){
var CollisionData = require('./CollisionData');

function Collisions (data) {
    this.data = data || [];
}

Collisions.prototype.add = function (collision) {
    if (this.get(collision.other.sprite) === false) {
        this.data.push(collision);
        collision.self.sprite.trigger('collision.begin', collision);
        collision.other.sprite.trigger('collision.begin', new CollisionData(collision.other.sprite, collision.self.sprite));
    }
};

Collisions.prototype.remove = function (collision) {
    collision.self.sprite.trigger('collision.end', collision);
    collision.other.sprite.trigger('collision.end', collision.other.sprite.collisions.get(collision.self.sprite));

    this.data.remove(collision);
};

Collisions.prototype.get = function (sprite) {
    var i;

    for (i = 0; i < this.data.length; i++) {
        if (this.data[i].other.sprite === sprite) {
            return this.data[i];
        }
    }

    return false;
};

Collisions.prototype.clear = function(){
    this.data = [];
};

module.exports = Collisions;

},{"./CollisionData":5}],7:[function(require,module,exports){
var Stage = require('./Stage');

function Camera (el){
    this.el         = el;
    this.stage      = new Stage();
    this.following  = null;
    this._x         = 0;
    this._y         = 0;
    this._width     = 0;
    this._height    = 0;

    Object.defineProperty(this, 'x', {
        get: function(){ return this._x; },
        set: function(v){
            this._x = v;
            this.stage.x = -this._x;
        }
    });

    Object.defineProperty(this, 'y', {
        get: function(){ return this._y; },
        set: function(v){
            this._y = v;
            this.stage.y = -this._y;
        }
    });

    Object.defineProperty(this, 'width', {
        get: function(){ return this._width; },
        set: function(v){
            this._width = v;
            this.el.width = this._width;
        }
    });

    Object.defineProperty(this, 'height', {
        get: function(){ return this._height; },
        set: function(v){
            this._height = v;
            this.el.height = this._height;
        }
    });
}

module.exports = Camera;

},{"./Stage":11}],8:[function(require,module,exports){
var EventHandler = require('../util/EventHandler');

function Container () {
    this.layer        = new createjs.Container();
    this.parent       = null;
    this.event        = null;
    this.childs       = [];
}

Container.prototype.addChild = function(child){
    child.parent = this;

    if (this.layer && child.layer) {
        this.layer.addChild(child.layer);
    }

    this.childs.push(child);

    this.trigger('add', child);
    child.trigger('added', this);
};

Container.prototype.removeChild = function(child){
    if (this.layer && child.layer) {
        this.layer.removeChild(child.layer);
    }

    this.childs.remove(child);

    this.trigger('remove', child);
    child.trigger('removed', this);
};

EventHandler.init(Container.prototype);

module.exports = Container;

},{"../util/EventHandler":17}],9:[function(require,module,exports){
function Paralax (view, factor) {
    var w           = image.width + window.Phyz.Camera.width,
        h           = image.height;

    this.layer      = new createjs.Container();
    this.view       = new createjs.Shape();

    this.view.graphics.clear().beginBitmapFill(image, 'repeat').drawRect(0, 0, w, h);

    this.x          = 0;
    this.y          = 0;
    this.width      = view.image.width;
    this.height     = h;

    this.factor     = factor;

    this.layer.addChild(this.view);
}

module.exports = Paralax;
},{}],10:[function(require,module,exports){
var Container   = require('./Container'),
    Collisions  = require('../collision/Collisions'),
    V2          = require('../V2');

var Sprite = function (type, sensor) {
    Container.apply(this);

    this._view          = null;
    this._debug         = null;
    this._world         = null;

    this.type           = type || 'static';
    this.sensor         = sensor || false;

    this.cache          = {};
    this.cache.x        = this.x = 0;
    this.cache.y        = this.y = 0;
    this.cache.width    = this._width = 0;
    this.cache.height   = this._height = 0;

    this.velocity       = new V2(0, 0);
    this.acceleration   = new V2(0, 0);
    this.resistance     = new V2(0, 0);

    this.config = {
        minVelocity     : new V2(-99999, -99999),
        maxVelocity     : new V2(99999, 99999),
        plataform       : false //Enabled only collisions at the top
    };

    this.collisions     = new Collisions();
    this.tiles          = [];

    this.tick           = null;

    Object.defineProperty(this, 'view', {
        get: function(){ return this._view; },
        set: function(v){
            if (this._view) {
                this.layer.removeChild(this._view);
            }

            this._view = v;
            this.layer.addChild(this._view);
        }
    });

    Object.defineProperty(this, 'width', {
        get: function(){ return this._width; },
        set: function(v){
            this._width = v;

            if (this.world && this.world.settings.DEBUG_DRAW) this.debugDraw();
        }
    });

    Object.defineProperty(this, 'height', {
        get: function(){ return this._height; },
        set: function(v){
            this._height = v;

            if (this.world && this.world.settings.DEBUG_DRAW) this.debugDraw();
        }
    });

    Object.defineProperty(this, 'global', {
        get: function(){
            var pos = new V2(this.x, this.y),
                p   = this.parent;

            if (p) {
                pos.x += p.global.x;
                pos.y += p.global.y;
            }

            return pos;
        }
    });

    Object.defineProperty(this, 'root', {
        get: function(){
            var r = this,
                p = this.parent;

            if (p) {
                r = p.root;
            }

            return r;
        }
    });

    Object.defineProperty(this, 'world', {
        get: function(){
            return this.root._world;
        }
    });

    Object.defineProperty(this, 'all_childrens_tiles', {
        get: function(){
            var t = this.tiles;

            for(var i = 0; i < this.childs.length; i++){
                for(var j = 0; j < this.childs[i].tiles.length; j++){
                    t.push(this.childs[i].tiles[j]);
                }
            }

            return t;
        }
    });
};

Sprite.prototype = new Container();

Sprite.prototype.debugDraw = function () {
    if (!this._debug) {
        this._debug = new createjs.Shape();
        this.layer.addChild(this._debug);
    }

    this._debug.graphics.c().f('#000000').dr(0, 0, this.width, this.height);
    this._debug.alpha = 0.5;
    this._debug.cache(0, 0, this.width, this.height);
};

Sprite.prototype.setCache = function () {
    this.cache.x        = this.x;
    this.cache.y        = this.y;
    this.cache.width    = this.width;
    this.cache.height   = this.height;
};

module.exports = Sprite;

},{"../V2":2,"../collision/Collisions":6,"./Container":8}],11:[function(require,module,exports){
var Container = require('./Container');

function Stage () {
    Container.apply(this);

    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
    this.layers = {};
}

Stage.prototype = new Container();

Stage.prototype.createLayer = function(name){
    var l = new Container();
    this.addChild(l);
    this.layers[name] = l;
};

Stage.prototype.removeLayer = function(name){
    this.removeChild(this.layers[name]);
    delete this.layers[name];
};

Stage.prototype.getLayer = function(name){
    return this.layers[name];
};

module.exports = Stage;

},{"./Container":8}],12:[function(require,module,exports){
/*  Authors: RVAZ (Renan Vaz) && Wormwood (MÃ¡rcio Laubstein)
 *	Version: 4.0
*/

if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(what, i) {
        i = i || 0;
        var L = this.length;
        while (i < L) {
            if(this[i] === what) return i;
            ++i;
        }
        return -1;
    };
}

if (!Array.prototype.remove) {
    Array.prototype.remove = function() {
        var what, a = arguments, L = a.length, ax;
        while (L && this.length) {
            what = a[--L];
            while ((ax = this.indexOf(what)) !== -1) {
                this.splice(ax, 1);
            }
        }
        return this;
    };
}

var EventHandler        = require('./util/EventHandler'),
    Device              = require('./util/Device'),
    Events              = require('./util/Events'),
    Container           = require('./display/Container'),
    Sprite              = require('./display/Sprite'),
    Camera              = require('./display/Camera'),
    Stage               = require('./display/Stage'),
    Paralax             = require('./display/Paralax'),
    Tween               = require('./tween/Tween'),
    Preloader           = require('./preloader/Preloader'),
    V2                  = require('./V2'),
    World               = require('./World');

var Phyz = {
    util: {
        device: Device,
        events: Events,
        EventHandler: EventHandler
    },

    V2: V2,
    Sprite: Sprite,
    Paralax: Paralax,
    Preloader: Preloader,
    Tween: Tween,
    World: World
};

window.P = window.Phyz = Phyz;
},{"./V2":2,"./World":3,"./display/Camera":7,"./display/Container":8,"./display/Paralax":9,"./display/Sprite":10,"./display/Stage":11,"./preloader/Preloader":13,"./tween/Tween":15,"./util/Device":16,"./util/EventHandler":17,"./util/Events":18}],13:[function(require,module,exports){
var EventHandler = require('../util/EventHandler');

function Preloader(){
    this.order = [];
    this.queue = {};
    this.loaded = {};
    this.index = 0;
}

EventHandler.init(Preloader.prototype);

/*
* Get Img DOM element
* @param name
*/
Preloader.prototype.get = function(name){
    if (this.loaded[name]) {
        return this.loaded[name];
    } else {
        return false;
    }
};

/*
* Add to a queue
* @param filename
*/
Preloader.prototype.add = function(name, filename){
    if(typeof this.queue[name] === 'undefined' && typeof this.loaded[name] === 'undefined'){
        this.order.push(name);
        this.queue[name] = filename;
        this.trigger('add');
    }
};

/*
* Clear the queue
* @param
*/
Preloader.prototype.clear = function(){
    this.order = [];
    this.queue = {};
    this.index = 0;
    this.trigger('clear');
};

/*
* Load to the next file
* @param
*/
Preloader.prototype.next = function(){
    if(this.order.length > this.index){
        var self        = this,
            img         = new Image(),
            i           = this.index++,
            filename    = this.queue[this.order[i]];

        img.onload = function(){
            self.loaded[self.order[i]] = this;

            self.trigger('itemComplete', {order: i, filename: filename, progress: i/self.order.length});
            self.next();
        };

        img.src = filename;
    }else{
        this.trigger('complete');
    }
};

/*
* Start to load the queue
* @param
*/
Preloader.prototype.start = function(){
    this.trigger('start');
    this.next();
};

module.exports = Preloader;

},{"../util/EventHandler":17}],14:[function(require,module,exports){
/*
 * @params
 * t => current_time,
 * b => start_value,
 * c => end_value,
 * d => total_time
 */

var Easings = {
    linear: function (t, b, c, d) {
        return b + ((c - b) * (t / d));
    },
    easeInQuad: function (t, b, c, d) {
        return c*(t/=d)*t + b;
    },
    easeOutQuad: function (t, b, c, d) {
        return -c *(t/=d)*(t-2) + b;
    },
    easeInOutQuad: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t + b;
        return -c/2 * ((--t)*(t-2) - 1) + b;
    },
    easeInCubic: function (t, b, c, d) {
        return c*(t/=d)*t*t + b;
    },
    easeOutCubic: function (t, b, c, d) {
        return c*((t=t/d-1)*t*t + 1) + b;
    },
    easeInOutCubic: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t + b;
        return c/2*((t-=2)*t*t + 2) + b;
    },
    easeInQuart: function (t, b, c, d) {
        return c*(t/=d)*t*t*t + b;
    },
    easeOutQuart: function (t, b, c, d) {
        return -c * ((t=t/d-1)*t*t*t - 1) + b;
    },
    easeInOutQuart: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
        return -c/2 * ((t-=2)*t*t*t - 2) + b;
    },
    easeInQuint: function (t, b, c, d) {
        return c*(t/=d)*t*t*t*t + b;
    },
    easeOutQuint: function (t, b, c, d) {
        return c*((t=t/d-1)*t*t*t*t + 1) + b;
    },
    easeInOutQuint: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
        return c/2*((t-=2)*t*t*t*t + 2) + b;
    },
    easeInSine: function (t, b, c, d) {
        return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
    },
    easeOutSine: function (t, b, c, d) {
        return c * Math.sin(t/d * (Math.PI/2)) + b;
    },
    easeInOutSine: function (t, b, c, d) {
        return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
    },
    easeInExpo: function (t, b, c, d) {
        return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
    },
    easeOutExpo: function (t, b, c, d) {
        return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    },
    easeInOutExpo: function (t, b, c, d) {
        if (t==0) return b;
        if (t==d) return b+c;
        if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
        return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function (t, b, c, d) {
        return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
    },
    easeOutCirc: function (t, b, c, d) {
        return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
    },
    easeInOutCirc: function (t, b, c, d) {
        if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
        return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
    },
    easeInElastic: function (t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    },
    easeOutElastic: function (t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
    },
    easeInOutElastic: function (t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
        return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
    },
    easeInBack: function (t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c*(t/=d)*t*((s+1)*t - s) + b;
    },
    easeOutBack: function (t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
    },
    easeInOutBack: function (t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
        return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
    },
    easeInBounce: function (t, b, c, d) {
        return c - jQuery.easing.easeOutBounce (d-t, 0, c, d) + b;
    },
    easeOutBounce: function (t, b, c, d) {
        if ((t/=d) < (1/2.75)) {
            return c*(7.5625*t*t) + b;
        } else if (t < (2/2.75)) {
            return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
        } else if (t < (2.5/2.75)) {
            return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
        } else {
            return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
        }
    },
    easeInOutBounce: function (t, b, c, d) {
        if (t < d/2) return jQuery.easing.easeInBounce (t*2, 0, c, d) * .5 + b;
        return jQuery.easing.easeOutBounce (t*2-d, 0, c, d) * .5 + c*.5 + b;
    }
};

module.exports = Easings;
},{}],15:[function(require,module,exports){
var Easings = require('./Easings');

/*
 * Params
 * o => Object
 * p => params
 * f => from
 * t => to
 */
function TweenData (o, p, f, t) {
    this.dt = -p.delay;
    this.o = o;
    this.p = p;
    this.from = f;
    this.to = t;
}

function Tween () {
    this._tweens = [];
    this.defaults = {
        time: 0.6,
        delay: 0,
        ease: 'linear',
    }
}

Tween.prototype.to = function (o, props, params) {
    this.create(o, props, params, false);
};

Tween.prototype.from = function (o, props, params) {
    this.create(o, props, params, true);
};

Tween.prototype.create = function (o, props, params, isFrom) {
     if (typeof params === 'number') {
        params = {time: params};
    } else if (typeof params === 'undefined') {
        params = {};
    }

    params.time     = params.time || this.defaults.time;
    params.delay    = params.delay || this.defaults.delay;
    params.ease     = params.ease || this.defaults.ease;

    var from = {},
        to = {},
        t, i;

    for (i in props) {
        if (isFrom) {
            from[i] = props[i];
            to[i]   = o[i];
        } else {
            to[i]   = props[i];
            from[i] = o[i];
        }
    }

    t = new TweenData(o, params, from, to);

    this._tweens.push(t);
};

Tween.prototype.stop = function (o) {
    var i, tweens = this._tweens, len = tweens.length, t;

    for (i = 0; i < len; i++) {
        t = tweens[i];
        if (t.o === o) {
            this._tweens.remove(t);
        }
    }
};

Tween.prototype.tick = function (dt) {
    var i, j, tweens = this._tweens, len = tweens.length, t;

    for (i = 0; i < len; i++) {
        t = tweens[i];

        t.dt += dt;
        t.dt = (t.dt > t.p.time ? t.p.time : t.dt);

        if (t.dt > 0) {
            for (j in t.from) {
                t.o[j] = Easings[t.p.ease](t.dt, t.from[j], t.to[j], t.p.time);
            }
        }

        if (t.dt === t.p.time) {
            if (t.p.oncomplete) {
                t.p.oncomplete.apply(t.o);
            }
            this._tweens.remove(t);
        }
    }
}

module.exports = new Tween();
},{"./Easings":14}],16:[function(require,module,exports){
var Device = {
    isStandAlone:       (('standalone' in window.navigator) && window.navigator.standalone === true),
    isRetinaDisplay:    (window.devicePixelRatio === 2),
    get isPortrait()    { return (window.orientation === 0 || window.orientation === 180); },
    get isTablet()      { return window.innerWidth > 480; },
    isAndroid:          (/android/gi).test(navigator.appVersion),
    isIDevice:          (/iphone|ipad/gi).test(navigator.appVersion),
    isTouchPad:         (/hp-tablet/gi).test(navigator.appVersion)
};

module.exports = Device;
},{}],17:[function(require,module,exports){
var EventHandler = (function(){
    var EventHandler = function(context){
        this.context = context;
        this.events = {};
    };

    EventHandler.prototype.on = function(name, fn){
        if (!this.events[name]) {
            this.events[name] = [fn];
        } else {
            this.events[name].push(fn);
        }
    };

    EventHandler.prototype.trigger = function(name, params){
        if (this.events[name]) {
            for (var i = 0; i < this.events[name].length; i++) {
                this.events[name][i].apply(this.context, [params || null]);
            }
        }
    };

    return {
        init: function (O) {
            O.on = function (name, fn) {
                if(!this.event) this.event = new EventHandler(this);
                this.event.on(name, fn);
            };

            O.trigger = function (name, params, retroative) {
                if(!this.event) this.event = new EventHandler(this);
                this.event.trigger(name, params);

                if(retroative && this.parent){
                    this.parent.trigger(name, params);
                }
            };
        }
    };
})();

module.exports = EventHandler;

},{}],18:[function(require,module,exports){
var Events = {
    RESIZE:         'onorientationchange' in window ? 'orientationchange' : 'resize',
    START:          'ontouchstart' in window ? 'touchstart' : 'mousedown',
    MOVE:           'ontouchstart' in window ? 'touchmove' : 'mousemove',
    END:            'ontouchstart' in window ? 'touchend' : 'mouseup',
    CANCEL:         'ontouchstart' in window ? 'touchcancel' : 'mouseup',
    CLICK:          'ontap' in window ? 'tap' : 'click'
};

module.exports = Events;

},{}]},{},[12])