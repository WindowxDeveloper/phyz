(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/**
 * Represents a V2 in two dimensions.
 *
 * @param {?number=} x The x position.
 * @param {?number=} y The y position.
 * @constructor
 */
function V2 (x, y) {
    this.x = Number(x || 0);
    this.y = Number(y || 0);
};

/**
 * Print vaues into formated string
 *
 * @return {String} Formated values.
 */
V2.prototype.toString = function () {
    return '['+this.x+', '+this.y+']';
};

/**
 * Clone the values of V2.
 *
 * @return {V2} This for chaining.
 */
V2.prototype.clone = function () {
    return new V2(this.x, this.y);
};

/**
 * Copy the values of another V2 into this one.
 *
 * @param {V2} other The other V2.
 * @return {V2} This for chaining.
 */
V2.prototype.copy = function (other) {
    this.x = other.x;
    this.y = other.y;
    return this;
};

/**
 * Rotate this V2 by 90 degrees
 *
 * @return {V2} This for chaining.
 */
V2.prototype.perp = function () {
    var x = this.x;
    this.x = this.y;
    this.y = -x;
    return this;
};

/**
 * Reverse this V2.
 *
 * @return {V2} This for chaining.
 */
V2.prototype.reverse = function () {
    this.x = -this.x;
    this.y = -this.y;
    return this;
};

/**
 * Normalize (make unit length) this V2.
 *
 * @return {V2} This for chaining.
 */
V2.prototype.normalize = function () {
    var d = this.len();
    if (d > 0) {
        this.x = this.x / d;
        this.y = this.y / d;
    }
    return this;
};

/**
 * Add another V2 to this one.
 *
 * @param {V2} other The other V2.
 * @return {V2} This for chaining.
 */
V2.prototype.add = function (other) {
    this.x += other.x;
    this.y += other.y;
    return this;
};

/**
 * Subtract another V2 from this one.
 *
 * @param {V2} other The other V2.
 * @return {V2} This for chaiing.
 */
V2.prototype.sub = function (other) {
    this.x -= other.x;
    this.y -= other.y;
    return this;
};

/**
 * Scale this V2.
 *
 * @param {number} x The scaling factor in the x direction.
 * @param {?number=} y The scaling factor in the y direction.  If this
 *   is not specified, the x scaling factor will be used.
 * @return {V2} This for chaining.
 */
V2.prototype.scale = function (x, y) {
    this.x *= x;
    this.y *= y || x;
    return this;
};

/**
 * Project this V2 on to another V2.
 *
 * @param {V2} other The V2 to project onto.
 * @return {V2} This for chaining.
 */
V2.prototype.project = function (other) {
    var amt = this.dot(other) / other.len2();
    this.x = amt * other.x;
    this.y = amt * other.y;
    return this;
};

/**
 * Project this V2 onto a V2 of unit length.
 *
 * @param {V2} other The unit V2 to project onto.
 * @return {V2} This for chaining.
 */
V2.prototype.projectN = function (other) {
    var amt = this.dot(other);
    this.x = amt * other.x;
    this.y = amt * other.y;
    return this;
};

/**
 * Reflect this V2 on an arbitrary axis.
 *
 * @param {V2} axis The V2 representing the axis.
 * @return {V2} This for chaining.
 */
V2.prototype.reflect = function (axis) {
    var x = this.x;
    var y = this.y;
    this.project(axis).scale(2);
    this.x -= x;
    this.y -= y;
    return this;
};

/**
 * Reflect this V2 on an arbitrary axis (represented by a unit V2)
 *
 * @param {V2} axis The unit V2 representing the axis.
 * @return {V2} This for chaining.
 */
V2.prototype.reflectN = function (axis) {
    var x = this.x;
    var y = this.y;
    this.projectN(axis).scale(2);
    this.x -= x;
    this.y -= y;
    return this;
};

/**
 * Get the dot product of this V2 against another.
 *
 * @param {V2}  other The V2 to dot this one against.
 * @return {number} The dot product.
 */
V2.prototype.dot = function (other) {
    return this.x * other.x + this.y * other.y;
};

/**
 * Get the length^2 of this V2.
 *
 * @return {number} The length^2 of this V2.
 */
V2.prototype.len2 = function () {
    return this.dot(this);
};

/**
 * Get the length of this V2.
 *
 * @return {number} The length of this V2.
 */
V2.prototype.len = function () {
    return Math.sqrt(this.len2());
};

module.exports = V2;

},{}],2:[function(require,module,exports){
/*  Authors: RVAZ (Renan Vaz) && Wormwood (MÃ¡rcio Laubstein)
 *	Version: 4.0
*/

var EventHandler        = require('./util/EventHandler'),
    Camera              = require('./display/Camera'),
    Paralax             = require('./display/Paralax'),
    Body                = require('./display/Body'),
    Tween               = require('./tween/Tween'),
    V2                  = require('./V2');

var timestamp = function () {
    return ((window.performance && window.performance.now) ? window.performance.now() : new Date().getTime());
};

function World (el, layers){
    this._bodies    = [];
    this._tweens    = [];
    this._stage     = null;
    this._paused    = false;

    this.camera     = new Camera(this, el, layers);

    this.settings   = {
        DEBUG_DRAW: true,
        MAX_DELTA_TIME: 1 / 12, // Minimum of 12 FPS
        set FPS_METER (v){
            if (v) {
                this._fpsmeter = v ? new FPSMeter({decimals: 0, graph: true, theme: 'dark', heat:  true, left: 'auto', top: '5px', right: '5px', bottom: 'auto'}) : null;
            } else {
                if (this._fpsmeter) {
                    this._fpsmeter.destroy();
                }
                this._fpsmeter = null;
            }
        }
    };

    this.physics = {
        acceleration: new V2(0, 800),
        resistance: new V2(200, 0)
    };

    this.time = {
        now:    0,
        dt:     0,
        time:   0,
        last:   timestamp(),
        acceleration: 0
    };

    Object.defineProperty(this, 'paused', {
        get: function(){ return this._paused; },
        set: function(v){
            this._paused = v;

            if (!this._paused) {
                this.time.last = timestamp();
            }
        }
    });

    this._stage = new createjs.Stage(this.camera.el);
    this._stage.addChild(this.camera.stage._container);
}

World.prototype.start = function () {
    var _this = this;

    var _frame = function(){
        if (!_this.paused) {
            _this.time.now = timestamp();
            _this.time.dt = Math.min(1, (_this.time.now - _this.time.last) / 1000);
            _this.time.time = _this.time.time + _this.time.dt;
            _this._update(_this.time.dt);
            _this._render();
            _this.time.last = _this.time.now;
            if (_this.settings._fpsmeter) _this.settings._fpsmeter.tick();
        }
        requestAnimationFrame(_frame);
    }

    if (this.settings._fpsmeter) this.settings._fpsmeter.tickStart();
    requestAnimationFrame(_frame);
};

World.prototype._update = function(dt){
    dt = dt > this.settings.MAX_DELTA_TIME ? this.settings.MAX_DELTA_TIME : dt;
    dt = this.time.acceleration === 0 ? dt : (this.time.acceleration > 0 ? dt * (this.time.acceleration + 1) : dt / Math.abs(this.time.acceleration - 1));

    Tween.tick(dt, this);
    Body.tick(dt, this);
    Camera.tick(dt, this);
};

World.prototype._render = function(){
    var s, i;

    for (i = 0; i < this._bodies.length; i++) {
        s = this._bodies[i];

        s._container.x = Math.round(s.x);
        s._container.y = Math.round(s.y);
    }

    this.camera.stage._container.x = Math.round(this.camera.stage.x);
    this.camera.stage._container.y = Math.round(this.camera.stage.y);

    this._stage.update();
};

EventHandler.init(World.prototype);

module.exports = World;

},{"./V2":1,"./display/Body":6,"./display/Camera":7,"./display/Paralax":10,"./tween/Tween":16,"./util/EventHandler":19}],3:[function(require,module,exports){
var CollisionData   = require('./CollisionData'),
    Collisions      = require('./Collisions'),
    V2              = require('../V2');

function Collide () {}

Collide.prototype.check = function(s, o){
    var collided = false, overlap = new V2(0, 0), a, b, x, y, c, collideY;

    if (s.x <= o.x) { a = s; b = o; } else { a = o; b = s; }
    x = b.x - (a.x + a.width);

    if (s.y <= o.y) { a = s; b = o; } else { a = o; b = s; }
    y = b.y - (a.y + a.height);

    if (x < 0 && y < 0) {
        collided = true;
        overlap.x = x;
        overlap.y = y;
    }

    if(collided){
        c = new CollisionData(s, o);

        if(!s.sensor && !o.sensor){
            if(!o.config.plataform || (o.config.plataform && s.cache.y < s.cache.y)) {
                collideY = overlap.x < overlap.y;
                if (collideY) {
                    s.y += overlap.y;
                } else {
                    s.x += overlap.x;
                }

                if(s.type === 'dynamic' && o.type === 'dynamic'){
                    this.elastic(c);
                }else{
                    this.normal(c);

                    if (collideY) {
                        s.velocity.y = 0;
                    } else {
                        s.velocity.x = 0;
                    }
                }

                s.collisions.add(c);
            }
        }else{
            s.collisions.add(c);
        }
    }else{
        c = s.collisions.get(o);
        if (c) {
            s.collisions.remove(c);
        }
    }
};

Collide.prototype.normal = function(collision){
    var s = collision.self.sprite,
        o = collision.other.sprite;

    o.velocity.x = o.x - o.cache.x;
    o.velocity.y = o.y - o.cache.y;

    s.x += o.velocity.x;
    s.y += o.velocity.y;
};

Collide.prototype.elastic = function (collision) {
    var s = collision.self.sprite,
    o = collision.other.sprite;

    s.velocity = new V2(
        ((s.velocity.x * (s.mass - o.mass)) + (2 * o.mass * o.velocity.x)) / (s.mass + o.mass),
        ((s.velocity.y * (s.mass - o.mass)) + (2 * o.mass * o.velocity.y)) / (s.mass + o.mass)
    );

    o.velocity = new V2(
        ((o.velocity.x * (o.mass - s.mass)) + (2 * s.mass * s.velocity.x)) / (o.mass + s.mass),
        ((o.velocity.y * (o.mass - s.mass)) + (2 * s.mass * s.velocity.y)) / (o.mass + s.mass)
    );
};

module.exports = new Collide;

},{"../V2":1,"./CollisionData":4,"./Collisions":5}],4:[function(require,module,exports){
var V2 = require('../V2');

function CollisionData (s, o){
    this.self = {
        sprite: s,
        point: new V2(s.x, s.y)
    };

    this.other = {
        sprite: o,
        point: new V2(o.x, o.y)
    };
}

module.exports = CollisionData;

},{"../V2":1}],5:[function(require,module,exports){
var CollisionData = require('./CollisionData');

function Collisions (data) {
    this.data = data || [];
}

Collisions.prototype.add = function (collision) {
    if (this.get(collision.other.sprite) === false) {
        this.data.push(collision);
        collision.self.sprite.trigger('collision.begin', collision);
        collision.other.sprite.trigger('collision.begin', new CollisionData(collision.other.sprite, collision.self.sprite));
    }
};

Collisions.prototype.remove = function (collision) {
    collision.self.sprite.trigger('collision.end', collision);
    collision.other.sprite.trigger('collision.end', collision.other.sprite.collisions.get(collision.self.sprite));

    this.data.remove(collision);
};

Collisions.prototype.get = function (sprite) {
    var i;

    for (i = 0; i < this.data.length; i++) {
        if (this.data[i].other.sprite === sprite) {
            return this.data[i];
        }
    }

    return false;
};

Collisions.prototype.clear = function(){
    this.data = [];
};

module.exports = Collisions;

},{"./CollisionData":4}],6:[function(require,module,exports){
var Sprite      = require('./Sprite'),
    Collisions  = require('../collision/Collisions'),
    Collide     = require('../collision/Collide'),
    V2          = require('../V2');

var Body = Sprite.extend({
    init: function (type, sensor) {
        Body.super(this).init();

        this._debug         = null; // Debug view
        this._tiles         = []; // Aux for collision detection

        // body type properties
        this.type           = type || 'static'; // Values: dynamic or static
        this.sensor         = sensor || false;

        // Position and size (and cache) properties
        this.cache          = {};
        this.cache.x        = this.x;
        this.cache.y        = this.y;
        this.cache.width    = this._width = 0;
        this.cache.height   = this._height = 0;

        // Physics properties
        this.mass           = 0;
        this.bounce         = 0; // Percent value: 0 to 1
        this.velocity       = new V2(0, 0);
        this.acceleration   = new V2(0, 0);
        this.resistance     = new V2(0, 0);

        this.config = {
            minVelocity     : new V2(-99999, -99999),
            maxVelocity     : new V2(99999, 99999),
            plataform       : false //Enabled only collisions at the top
        };

        // Collision properties
        this.collisions     = new Collisions();

        // Game loop function
        this.tick           = null;

        this.__set_x = function(v){
            this._x = v;
        }

        this.__set_y = function(v){
            this._y = v;
        }

        Object.defineProperty(this, 'width', {
            get: function(){ return this._width; },
            set: function(v){
                this._width = v;

                if (this.world && this.world.settings.DEBUG_DRAW) this.debugDraw();
            }
        });

        Object.defineProperty(this, 'height', {
            get: function(){ return this._height; },
            set: function(v){
                this._height = v;

                if (this.world && this.world.settings.DEBUG_DRAW) this.debugDraw();
            }
        });

        Object.defineProperty(this, 'tiles', {
            get: function(){
                var t = this._tiles;

                for(var i = 0; i < this.childs.length; i++){
                    for(var j = 0; j < this.childs[i]._tiles.length; j++){
                        t.push(this.childs[i]._tiles[j]);
                    }
                }

                return t;
            }
        });

        Object.defineProperty(this, 'main', {
            get: function(){
                var p = this, c, main;

                do {
                    c = p;

                    // Verify if is a body
                    if (typeof c.type !== 'undefined') {
                        main = c;
                    }

                    p = c.parent;
                } while (p);

                return main;
            }
        });

        this.on('added', function () {
            if (this.world.settings.DEBUG_DRAW) {
                this.debugDraw();
            }

            this.world._bodies.push(this);
        });

        this.on('removed', function () {
            this.world._bodies.remove(this);
        });
    },
    setCache: function () {
        this.cache.x        = this.x;
        this.cache.y        = this.y;
        this.cache.width    = this.width;
        this.cache.height   = this.height;
    },
    debugDraw: function () {
        if (!this._debug) {
            this._debug = new createjs.Shape();
            this._container.addChild(this._debug);
        }

        this._debug.graphics.c().f('#000000').dr(0, 0, this.width, this.height);
        this._debug.alpha = 0.5;
        this._debug.cache(0, 0, this.width, this.height);
    }
});

Body.tick = function (dt, world) {
    var s, acceleration, resistance, others, o, i, j, bodies = world._bodies;

    for (i = 0; i < bodies.length; i++) {
        s = bodies[i];

        s.setCache();

        if (s.tick) {
            s.tick(dt);
        }

        if (s.type === 'dynamic') {
            acceleration = new V2(
                (s.world.physics.acceleration.x + s.acceleration.x) * dt,
                (s.world.physics.acceleration.y + s.acceleration.y) * dt
            );

            resistance = new V2(
                (s.world.physics.resistance.x + s.resistance.x) * dt,
                (s.world.physics.resistance.y + s.resistance.y) * dt
            );

            s.velocity.add(acceleration);

            if (Math.abs(s.velocity.x) > resistance.x) {
                s.velocity.x += (s.velocity.x > 0) ? -resistance.x : resistance.x;
            } else {
                s.velocity.x = 0;
            }

            if (Math.abs(s.velocity.y) > resistance.y) {
                s.velocity.y += (s.velocity.y > 0) ? -resistance.y : resistance.y;
            } else {
                s.velocity.y = 0;
            }

            s.velocity.x = (s.velocity.x < s.config.minVelocity.x) ? s.config.minVelocity.x : s.velocity.x;
            s.velocity.y = (s.velocity.y < s.config.minVelocity.y) ? s.config.minVelocity.y : s.velocity.y;
            s.velocity.x = (s.velocity.x > s.config.maxVelocity.x) ? s.config.maxVelocity.x : s.velocity.x;
            s.velocity.y = (s.velocity.y > s.config.maxVelocity.y) ? s.config.maxVelocity.y : s.velocity.y;

            s.y += s.velocity.y * dt;
            s.x += s.velocity.x * dt;

            // others = s.world.camera.stage.tiles.getOthers(s);

            for (j = 0; j < bodies.length; j++) {
                o = bodies[j];
                if (s !== o) {
                    Collide.check(s, o);
                }
            }
        }
    }
}

module.exports = Body;

},{"../V2":1,"../collision/Collide":3,"../collision/Collisions":5,"./Sprite":11}],7:[function(require,module,exports){
var Stage = require('./Stage'),
    V2    = require('../V2');

function Camera (world, el, layers){
    this.el         = el;
    this.world      = world;
    this.stage      = new Stage(world, layers);
    this.target     = null;
    this._x         = 0;
    this._y         = 0;
    this._width     = 0;
    this._height    = 0;

    Object.defineProperty(this, 'x', {
        get: function(){ return this._x; },
        set: function(v){
            this._x = v;
            this.stage.x = -this._x;
        }
    });

    Object.defineProperty(this, 'y', {
        get: function(){ return this._y; },
        set: function(v){
            this._y = v;
            this.stage.y = -this._y;
        }
    });

    Object.defineProperty(this, 'width', {
        get: function(){ return this._width; },
        set: function(v){
            this._width = v;
            this.el.width = this._width;
        }
    });

    Object.defineProperty(this, 'height', {
        get: function(){ return this._height; },
        set: function(v){
            this._height = v;
            this.el.height = this._height;
        }
    });
}

Camera.tick = function (dt, world) {
    var c = world.camera, limit;

    if (c.target) {
        limit = new V2(c.stage.width - c.width, c.stage.height - c.height);
        c.x = c.target.global.x + (c.target.width/2) - (c.width/2);
        c.y = c.target.global.y + (c.target.height/2) - (c.height/2);

        if (c.x < 0) {
            c.x = 0;
        } else if (c.x > limit.x) {
            c.x = limit.x;
        }

        if (c.y < 0) {
            c.y = 0;
        } else if (c.y > limit.y) {
            c.y = limit.y;
        }
    }
};

module.exports = Camera;

},{"../V2":1,"./Stage":12}],8:[function(require,module,exports){
var EventHandler    = require('../util/EventHandler'),
    Class           = require('../util/Class');

var Container = Class.extend({
    init: function () {
        // Draw/View properties
        this._container     = new createjs.Container();

        // Container properties
        this.parent         = null;
        this.childs         = [];

        this._x             = 0;
        this._y             = 0;

        // Position properties
        Object.defineProperty(this, 'x', {
            get: function(){ return this._x; },
            set: function(v){
                this._x = v;
                this._container.x = v;
            }
        });

        Object.defineProperty(this, 'y', {
            get: function(){ return this._y; },
            set: function(v){
                this._y = v;
                this._container.y = v;
            }
        });
    },
    addChild: function (child) {
        child.parent = this;

        if (this._container && child._container) {
            this._container.addChild(child._container);
        }

        this.childs.push(child);

        this.trigger('add', child);
        child.trigger('added', this);
    },
    removeChild: function (child) {
        if (this._container && child._container) {
            this._container.removeChild(child._container);
        }

        this.childs.remove(child);

        this.trigger('remove', child);
        child.trigger('removed', this);
    },
    remove: function () {
        if (this.parent) {
            this.parent.removeChild(this);
        }
    }
});

EventHandler.init(Container.prototype);

module.exports = Container;

},{"../util/Class":17,"../util/EventHandler":19}],9:[function(require,module,exports){
var Container = require('./Container');

var Layer = Container.extend({
    init: function(name){
        Layer.super(this).init();

        this.name = name;
    }
});

module.exports = Layer;

},{"./Container":8}],10:[function(require,module,exports){
function Paralax (view, factor) {
    var w           = image.width + this._world.camera.width,
        h           = image.height;

    this._container = new createjs.Container();
    this.view       = new createjs.Shape();

    this.view.graphics.clear().beginBitmapFill(image, 'repeat').drawRect(0, 0, w, h).cache(0, 0, w, h);

    this.x          = 0;
    this.y          = 0;
    this.width      = view.image.width;
    this.height     = h;

    this.factor     = factor;

    this._container.addChild(this.view);
}

Paralax.tick = function () {

}

module.exports = Paralax;

},{}],11:[function(require,module,exports){
var Container   = require('./Container'),
    Layer       = require('./Layer'),
    V2          = require('../V2');

var Sprite = Container.extend({
    init: function () {
        Sprite.super(this).init();

        this._view = null;

        // Define setter and getter
        Object.defineProperty(this, 'view', {
            get: function(){ return this._view; },
            set: function(v){
                if (this._view) {
                    this._container.removeChild(this._view);
                }

                this._view = v;
                this._container.addChild(this._view);
            }
        });

        Object.defineProperty(this, 'layer', {
            get: function(){
                var p = this, c;

                do {
                    c = p;
                    p = c.parent;
                } while (p && !(p instanceof Layer));

                return p;
            }
        });

        Object.defineProperty(this, 'stage', {
            get: function(){
                var stage = false, layer = this.layer;

                if (layer) {
                    stage = layer.parent;
                }

                return stage;
            }
        });

        Object.defineProperty(this, 'world', {
            get: function(){
                var world = false;

                if (this.stage) {
                    world = this.stage.world;
                }

                return world;
            }
        });

        Object.defineProperty(this, 'global', {
            get: function(){
                var pos = new V2(this.x, this.y),
                    p   = this.parent,
                    c;

                do {
                    c = p;

                    pos.x += c.x;
                    pos.y += c.y;

                    p = c.parent;
                } while (!(p instanceof Layer));

                return pos;
            }
        });
    }
});

module.exports = Sprite;

},{"../V2":1,"./Container":8,"./Layer":9}],12:[function(require,module,exports){
var Container   = require('./Container'),
    Layer       = require('./Layer');
    // TiledIndex  = require('../TiledIndex');


var Stage = Container.extend({
    init: function(world, layers){
        var i, l;
        layers = layers || ['default'];

        Stage.super(this).init();

        this.world = world;
        this.layers = {};

        for (i = 0; i < layers.length; i++) {
            this.layers[layers[i]] = new Layer(layers[i]);
            this.addChild(this.layers[layers[i]]);
        }
    },
    layer: function(name){
        return this.layers[name];
    }
});

module.exports = Stage;

},{"./Container":8,"./Layer":9}],13:[function(require,module,exports){
/*  Authors: RVAZ (Renan Vaz) && Wormwood (MÃ¡rcio Laubstein)
 *	Version: 4.0
*/

if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(what, i) {
        i = i || 0;
        var L = this.length;
        while (i < L) {
            if(this[i] === what) return i;
            ++i;
        }
        return -1;
    };
}

if (!Array.prototype.remove) {
    Array.prototype.remove = function() {
        var what, a = arguments, L = a.length, ax;
        while (L && this.length) {
            what = a[--L];
            while ((ax = this.indexOf(what)) !== -1) {
                this.splice(ax, 1);
            }
        }
        return this;
    };
}

var Device              = require('./util/Device'),
    Events              = require('./util/Events'),
    Sprite              = require('./display/Sprite'),
    Body                = require('./display/Body'),
    // Paralax             = require('./display/Paralax'),
    Preloader           = require('./preloader/Preloader'),
    Tween               = require('./tween/Tween'),
    V2                  = require('./V2'),
    World               = require('./World');

var Phyz = {
    util: {
        device: Device,
        events: Events
    },
    V2        : V2,
    Preloader : Preloader,
    Tween     : Tween,
    Sprite    : Sprite,
    Body      : Body,
    // Paralax   : Paralax,
    World     : World
};

window.P = window.Phyz = Phyz;

},{"./V2":1,"./World":2,"./display/Body":6,"./display/Sprite":11,"./preloader/Preloader":14,"./tween/Tween":16,"./util/Device":18,"./util/Events":20}],14:[function(require,module,exports){
var EventHandler = require('../util/EventHandler');

function Preloader(){
    this.order = [];
    this.queue = {};
    this.loaded = {};
    this.index = 0;
}

EventHandler.init(Preloader.prototype);

/*
* Get Img DOM element
* @param name
*/
Preloader.prototype.get = function(name){
    if (this.loaded[name]) {
        return this.loaded[name];
    } else {
        return false;
    }
};

/*
* Add to a queue
* @param filename
*/
Preloader.prototype.add = function(name, filename){
    if(typeof this.queue[name] === 'undefined' && typeof this.loaded[name] === 'undefined'){
        this.order.push(name);
        this.queue[name] = filename;
        this.trigger('add');
    }
};

/*
* Clear the queue
* @param
*/
Preloader.prototype.clear = function(){
    this.order = [];
    this.queue = {};
    this.index = 0;
    this.trigger('clear');
};

/*
* Load to the next file
* @param
*/
Preloader.prototype.next = function(){
    if(this.order.length > this.index){
        var self        = this,
            img         = new Image(),
            i           = this.index++,
            filename    = this.queue[this.order[i]];

        img.onload = function(){
            self.loaded[self.order[i]] = this;

            self.trigger('itemComplete', {order: i, filename: filename, progress: i/self.order.length});
            self.next();
        };

        img.src = filename;
    }else{
        this.trigger('complete');
    }
};

/*
* Start to load the queue
* @param
*/
Preloader.prototype.start = function(){
    this.trigger('start');
    this.next();
};

module.exports = Preloader;

},{"../util/EventHandler":19}],15:[function(require,module,exports){
/*
 * @params
 * t => current_time,
 * b => start_value,
 * c => end_value,
 * d => total_time
 */

var Easings = {
    linear: function (t, b, c, d) {
        return b + ((c - b) * (t / d));
    },
    easeInQuad: function (t, b, c, d) {
        return c*(t/=d)*t + b;
    },
    easeOutQuad: function (t, b, c, d) {
        return -c *(t/=d)*(t-2) + b;
    },
    easeInOutQuad: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t + b;
        return -c/2 * ((--t)*(t-2) - 1) + b;
    },
    easeInCubic: function (t, b, c, d) {
        return c*(t/=d)*t*t + b;
    },
    easeOutCubic: function (t, b, c, d) {
        return c*((t=t/d-1)*t*t + 1) + b;
    },
    easeInOutCubic: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t + b;
        return c/2*((t-=2)*t*t + 2) + b;
    },
    easeInQuart: function (t, b, c, d) {
        return c*(t/=d)*t*t*t + b;
    },
    easeOutQuart: function (t, b, c, d) {
        return -c * ((t=t/d-1)*t*t*t - 1) + b;
    },
    easeInOutQuart: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
        return -c/2 * ((t-=2)*t*t*t - 2) + b;
    },
    easeInQuint: function (t, b, c, d) {
        return c*(t/=d)*t*t*t*t + b;
    },
    easeOutQuint: function (t, b, c, d) {
        return c*((t=t/d-1)*t*t*t*t + 1) + b;
    },
    easeInOutQuint: function (t, b, c, d) {
        if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
        return c/2*((t-=2)*t*t*t*t + 2) + b;
    },
    easeInSine: function (t, b, c, d) {
        return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
    },
    easeOutSine: function (t, b, c, d) {
        return c * Math.sin(t/d * (Math.PI/2)) + b;
    },
    easeInOutSine: function (t, b, c, d) {
        return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
    },
    easeInExpo: function (t, b, c, d) {
        return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
    },
    easeOutExpo: function (t, b, c, d) {
        return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    },
    easeInOutExpo: function (t, b, c, d) {
        if (t==0) return b;
        if (t==d) return b+c;
        if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
        return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function (t, b, c, d) {
        return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
    },
    easeOutCirc: function (t, b, c, d) {
        return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
    },
    easeInOutCirc: function (t, b, c, d) {
        if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
        return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
    },
    easeInElastic: function (t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    },
    easeOutElastic: function (t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
    },
    easeInOutElastic: function (t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
        if (a < Math.abs(c)) { a=c; var s=p/4; }
        else var s = p/(2*Math.PI) * Math.asin (c/a);
        if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
        return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
    },
    easeInBack: function (t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c*(t/=d)*t*((s+1)*t - s) + b;
    },
    easeOutBack: function (t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
    },
    easeInOutBack: function (t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
        return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
    },
    easeInBounce: function (t, b, c, d) {
        return c - this.easeOutBounce (d-t, 0, c, d) + b;
    },
    easeOutBounce: function (t, b, c, d) {
        if ((t/=d) < (1/2.75)) {
            return c*(7.5625*t*t) + b;
        } else if (t < (2/2.75)) {
            return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
        } else if (t < (2.5/2.75)) {
            return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
        } else {
            return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
        }
    },
    easeInOutBounce: function (t, b, c, d) {
        if (t < d/2) return this.easeInBounce (t*2, 0, c, d) * .5 + b;
        return this.easeOutBounce (t*2-d, 0, c, d) * .5 + c*.5 + b;
    }
};

module.exports = Easings;

},{}],16:[function(require,module,exports){
var Easings = require('./Easings');

/*
 * Params
 * o => Object
 * p => params
 * f => from
 * t => to
 */
function TweenData (o, p, f, t) {
    this.dt = -p.delay;
    this.o = o;
    this.p = p;
    this.from = f;
    this.to = t;
}

function Tween () {
    this.defaults = {
        time: 0.6,
        delay: 0,
        ease: 'linear',
    }
}

Tween.prototype.to = function (o, props, params) {
    this.create(o, props, params, false);
};

Tween.prototype.from = function (o, props, params) {
    this.create(o, props, params, true);
};

Tween.prototype.clear = function (o) {
    var i, tweens = o.world._tweens, len = tweens.length, t;

    for (i = 0; i < len; i++) {
        t = tweens[i];
        if (t.o === o) {
            o.world._tweens.remove(t);
        }
    }
};

Tween.prototype.create = function (o, props, params, isFrom) {
     if (typeof params === 'number') {
        params = {time: params};
    } else if (typeof params === 'undefined') {
        params = {};
    }

    params.time     = params.time || this.defaults.time;
    params.delay    = params.delay || this.defaults.delay;
    params.ease     = params.ease || this.defaults.ease;

    var from = {},
        to = {},
        t, i;

    for (i in props) {
        if (isFrom) {
            from[i] = props[i];
            to[i]   = o[i];
        } else {
            to[i]   = props[i];
            from[i] = o[i];
        }
    }

    t = new TweenData(o, params, from, to);

    o.world._tweens.push(t);
};

var t = new Tween();
t.tick = function (dt, world) {
    var i, j, t, tweens = world._tweens, len = tweens.length;

    for (i = 0; i < len; i++) {
        t = tweens[i];

        t.dt += dt;
        t.dt = (t.dt > t.p.time ? t.p.time : t.dt);

        if (t.dt > 0) {
            for (j in t.from) {
                t.o[j] = Easings[t.p.ease](t.dt, t.from[j], t.to[j] - t.from[j], t.p.time);
            }
        }

        if (t.dt === t.p.time) {
            if (t.p.oncomplete) {
                t.p.oncomplete.apply(t.o);
            }
            world._tweens.remove(t);
        }
    }
}

module.exports = t;

},{"./Easings":15}],17:[function(require,module,exports){
function Class () {}

Class.prototype.init = function () {};

Class.extend = function (p) {
    var i,
        _class = new Function('return function(){ this.init.apply(this, arguments); };')();

    _class.extend = this.extend;

    for (i in this.prototype) {
        _class.prototype[i] = this.prototype[i];
    }

    for (i in p) {
        _class.prototype[i] = p[i];
    }

    _class._super = this.prototype;

    _class.super = function (scope) {
        var i, _super = {};
        for (i in this._super) {
            _super[i] = this._super[i].bind(scope);
        }

        return _super;
    }

    return _class;
}

module.exports = Class;

},{}],18:[function(require,module,exports){
var Device = {
    isStandAlone:       (('standalone' in window.navigator) && window.navigator.standalone === true),
    isRetinaDisplay:    (window.devicePixelRatio === 2),
    get isPortrait()    { return (window.orientation === 0 || window.orientation === 180); },
    get isTablet()      { return window.innerWidth > 480; },
    isAndroid:          (/android/gi).test(navigator.appVersion),
    isIDevice:          (/iphone|ipad/gi).test(navigator.appVersion),
    isTouchPad:         (/hp-tablet/gi).test(navigator.appVersion)
};

module.exports = Device;
},{}],19:[function(require,module,exports){
var EventHandler = (function(){
    var EventHandler = function(context){
        this.context = context;
        this.events = {};
    };

    EventHandler.prototype.on = function(name, fn){
        if (!this.events[name]) {
            this.events[name] = [fn];
        } else {
            this.events[name].push(fn);
        }
    };

    EventHandler.prototype.trigger = function(name, params){
        if (this.events[name]) {
            for (var i = 0; i < this.events[name].length; i++) {
                this.events[name][i].apply(this.context, [params || null]);
            }
        }
    };

    return {
        init: function (O) {
            O.on = function (name, fn) {
                if (!this._event) { this._event = new EventHandler(this); }

                this._event.on(name, fn);
            };

            O.trigger = function (name, params, retroative) {
                if (!this._event) { this._event = new EventHandler(this); }

                this._event.trigger(name, params);

                if (retroative && this.parent){
                    this.parent.trigger(name, params);
                }
            };
        }
    };
})();

module.exports = EventHandler;

},{}],20:[function(require,module,exports){
var Events = {
    RESIZE:         'onorientationchange' in window ? 'orientationchange' : 'resize',
    START:          'ontouchstart' in window ? 'touchstart' : 'mousedown',
    MOVE:           'ontouchstart' in window ? 'touchmove' : 'mousemove',
    END:            'ontouchstart' in window ? 'touchend' : 'mouseup',
    CANCEL:         'ontouchstart' in window ? 'touchcancel' : 'mouseup',
    CLICK:          'ontap' in window ? 'tap' : 'click'
};

module.exports = Events;

},{}]},{},[13])